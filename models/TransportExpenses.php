<?php

namespace app\models;

use Yii;

class TransportExpenses extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'transport_expenses';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['expenses_type_id', 'transport_waybill_id', 'expenses_seller_type_id', 'check_attached',
                'expenses_is_taken', 'payment_method_id', 'created_at', 'creator_id',
                'updated_at', 'updator_id', 'expenses_seller_id', 'expenses_doc_type_id',
                'transport_expenses_paymenter_id'], 'integer'],
            //[['expenses_seller_name'], 'string', 'max' => 100],
            [['expenses_is_taken_comment', 'payment_comment'], 'string', 'max' => 255],
            [['doc_number'], 'string', 'max' => 16],
            [['price', 'count', /*'expenses_seller_name',*/], 'required'],
            [['need_pay_date', 'payment_date', 'price', 'points', 'view_group', 'count',], 'safe']

        ];
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'view_group' => 'Группа (таблица) в которой находиться расход',
            'transport_waybill_id' => 'Путевой лист',
            'doc_number' => 'Номер документа',
            'expenses_doc_type_id' => 'Вид документа',

            'expenses_type_id' => 'Тип расходов',
            'expenses_seller_type_id' => 'Тип продавца (АЗС, Мойка, Стоянка, Прочие)',
            'price' => 'Сумма, руб',
            'check_attached' => 'Чек прикреплен',

            //'expenses_seller_name' => 'Наименование продавца',
            'expenses_seller_id' => 'Наименование продавца',

            'count' => 'Количество',
            'points' => 'Баллы',
            'expenses_is_taken' => 'Расходы приняты',
            'expenses_is_taken_comment' => 'Комментарий о принятии расходов',
            'payment_method_id' => 'Способ оплаты',
            'need_pay_date' => 'Дата документа - это дата входящего документа на требование оплаты',


            'payment_date' => 'Дата оплаты',
            'transport_expenses_paymenter_id' => 'Кто оплатил',
            'payment_comment' => 'Комментарий к оплате',
            'created_at' => 'Дата создания',
            'creator_id' => 'Создатель',
            'updated_at' => 'Дата изменения',
            'updator_id' => 'Изменитель',
        ];
    }

    public function beforeValidate()
    {
        if(isset($this->payment_date) && preg_match('/^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/i', $this->payment_date)) {
            $this->payment_date = strtotime($this->payment_date);   // convent '07.11.2016' to unixtime
        }
//        if(isset($this->need_pay_date) && preg_match('/^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/i', $this->need_pay_date)) {
//            $this->need_pay_date = strtotime($this->need_pay_date);   // convent '07.11.2016' to unixtime
//        }


        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $transport_expenses_detailings = $this->transportExpensesDetailings;
        foreach($transport_expenses_detailings as $detailing) {
            $detailing->delete();
        }

        return parent::beforeDelete();
    }

    public function afterDelete()
    {
        $waybill = $this->waybill;
        if($waybill != null) {
            $waybill->updateResultFields();// пересчитываем некоторые поля Путевого листа
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }


    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->created_at = time();
            $this->creator_id = Yii::$app->user->id;
        }else {
            $this->updated_at = time();
            $this->updator_id = Yii::$app->user->id;
        }


        return parent::beforeSave($insert);
    }

    public function getTransportExpensesDetailings()
    {
        return $this->hasMany(TransportExpensesDetailing::className(), ['expense_id' => 'id']);
    }

    public function getSellerType()
    {
        return $this->hasOne(TransportExpensesSellerType::className(), ['id' => 'expenses_seller_type_id']);
    }

    public function getSeller()
    {
        return $this->hasOne(TransportExpensesSeller::className(), ['id' => 'expenses_seller_id']);
    }

    public function getType()
    {
        return $this->hasOne(TransportExpensesTypes::className(), ['id' => 'expenses_type_id']);
    }

    public function getWaybill()
    {
        return $this->hasOne(TransportWaybill::className(), ['id' => 'transport_waybill_id']);
    }

    public function getPaymenter() {
        return $this->hasOne(User::className(), ['id' => 'transport_expenses_paymenter_id']);
    }

    public function getDocType() {
        return $this->hasOne(TransportExpensesDocType::className(), ['id' => 'expenses_doc_type_id']);
    }

    public function getPaymentMethod() {
        return $this->hasOne(TransportPaymentMethods::className(), ['id' => 'payment_method_id']);
    }


    public static function getViewGroups() {

        return [
            'typical_expenses' => 'typical_expenses',
            'other_expenses' => 'other_expenses',
            'incoming_payment_requests' => 'incoming_payment_requests'
        ];
    }


    public function setField($field_name, $field_value)
    {
        switch($field_name) {
            case 'need_pay_date':
                if(isset($field_value) && preg_match('/^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/i', $field_value)) {
                    $field_value = strtotime($field_value);   // convent '07.11.2016' to unixtime
                }
                break;
            case 'payment_date':
                if(isset($field_value) && preg_match('/^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/i', $field_value)) {
                    $field_value = strtotime($field_value);   // convent '07.11.2016' to unixtime
                }
                break;
        }


        if(!empty($field_value)) {
            $field_value = htmlspecialchars($field_value);
        }

        if($field_value === false) {
            $sql = 'UPDATE `'.self::tableName().'` SET '.$field_name.' = false WHERE id = '.$this->id;
        }elseif(empty($field_value)) {
            $sql = 'UPDATE `'.self::tableName().'` SET '.$field_name.' = NULL WHERE id = '.$this->id;
        }else {
            $sql = 'UPDATE `'.self::tableName().'` SET '.$field_name.' = "'.$field_value.'" WHERE id = '.$this->id;
        }

        $res = Yii::$app->db->createCommand($sql)->execute();

        return $res;
    }

    public function getTransport() {
        return $this->hasOne(Transport::className(), ['id' => 'waybill_transport_id']);
    }

    public function getDriver() {
        return $this->hasOne(Driver::className(), ['id' => 'waybill_driver_id']);
    }

}
